import{_ as s,i as a,h as n,O as l}from"./chunks/framework.9399b50c.js";const p="/notes/assets/eventloop.fb38e1df.png",e="/notes/assets/eventloop02.5f96ccbc.png",o="/notes/assets/eventloop03.4aa2123e.png",r="/notes/assets/eventloop03.4aa2123e.png",c="/notes/assets/eventloop05.07832209.png",t="/notes/assets/eventloop06.9d370299.png",i="/notes/assets/eventloop07.952387fe.png",y="/notes/assets/eventloop08.3464932a.png",F="/notes/assets/eventloop09.b91bcdb7.gif",v=JSON.parse('{"title":"消息队列 和 事件循环系统","description":"","frontmatter":{"author":"liaoyi"},"headers":[],"relativePath":"basic/os_net_browser/07_eventLoop.md","lastUpdated":1696236510000}'),b={name:"basic/os_net_browser/07_eventLoop.md"},D=l('<h1 id="消息队列-和-事件循环系统" tabindex="-1">消息队列 和 事件循环系统 <a class="header-anchor" href="#消息队列-和-事件循环系统" aria-label="Permalink to &quot;消息队列 和 事件循环系统&quot;">​</a></h1><h2 id="相关推荐" tabindex="-1">相关推荐 <a class="header-anchor" href="#相关推荐" aria-label="Permalink to &quot;相关推荐&quot;">​</a></h2><ul><li><a href="http://latentflip.com/loupe" target="_blank" rel="noreferrer">Loupe 可视化工具</a>：这是一个可视化的工具，能够帮助了解 js 的调用栈、事件循环、回调队列之间的调用关系等等的工具，帮助我们了解代码的执行情况。</li></ul><p>下面是两个我觉得讲的比较好的视频推荐：</p><ul><li><p><a href="https://www.youtube.com/watch?v=cCOL7MC4Pl0&amp;t=1592s" target="_blank" rel="noreferrer">What the heck is the event loop anyway? | Philip Roberts | JSConf EU</a></p></li><li><p><a href="https://www.youtube.com/watch?v=8aGhZQkoFbQ" target="_blank" rel="noreferrer">Jake Archibald: In The Loop - JSConf.Asia</a>。</p></li></ul><h2 id="什么是事件循环" tabindex="-1">什么是事件循环 <a class="header-anchor" href="#什么是事件循环" aria-label="Permalink to &quot;什么是事件循环&quot;">​</a></h2><p>为了协调事件、用户交互、脚本、UI 渲染、网络请求，用户代理必须使用 事件循环机制（Event Loop）。</p><p>这种事件循环机制是由 JavaScript 的宿主环境来实现的，在浏览器运行环境中由浏览器内核引擎实现，而在 NodeJS 中则由 libuv 引擎实现。</p><p>主线程运行时候，产生堆（Heap）和栈（Stack），栈中的代码调用各种外部 API，它们在任务队列中加入各种事件。只要栈中的代码执行完毕，主线程就会通过事件循环机制读取任务队列，依次执行那些事件所对应的回调函数。</p><p><strong>运行机制：</strong></p><ul><li>所有同步任务都在主线程上执行，形成一个 执行栈（Execution Context Stack）</li><li>主线程之外，还存在一个 任务队列（Task Queue）。只要异步任务有了运行结果，就在 任务队列 之中放置一个事件</li><li>一旦 执行栈 中的所有同步任务执行完毕，系统就会读取 任务队列，看看里面有哪些待执行事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行</li><li>主线程不断重复上面的第三步</li></ul><h2 id="任务的处理" tabindex="-1">任务的处理 <a class="header-anchor" href="#任务的处理" aria-label="Permalink to &quot;任务的处理&quot;">​</a></h2><p>为了能更好的理解，我们来搞个场景，搞几个任务来看怎么安排：比如在大学里面我们会举行班级活动，假设是班主任要求举行一次关于 职业规划与梦想相关的主题班会，而班长就会和班委们集思广益一起探讨相关任务。</p><ul><li>任务 1：确定主题名称 我们的征途是星辰大海</li><li>任务 2：写好活动策划书，班委各司其职</li><li>任务 3：采购物资与班会地点安排</li><li>任务 4：进行复盘总结</li></ul><p>围绕这几个任务，看看是怎么处理的吧~</p><h2 id="单线程处理安排好的任务" tabindex="-1">单线程处理安排好的任务 <a class="header-anchor" href="#单线程处理安排好的任务" aria-label="Permalink to &quot;单线程处理安排好的任务&quot;">​</a></h2><p>单线程处理任务，就类似于：班主任提出需求，线程开始，各班委分配好任务，将任务按照顺序依次执行，等所有任务都执行完，班会结束，线程主动退出。整个流程如下图所示：</p><p><img src="'+p+'" alt=""></p><h3 id="错误机制-出现问题" tabindex="-1">错误机制（出现问题） <a class="header-anchor" href="#错误机制-出现问题" aria-label="Permalink to &quot;错误机制（出现问题）&quot;">​</a></h3><p>怎么样会出现问题呢？主要出现在班委分配任务上，并不是班主任一提出要求，就能把任务安排的好，可能在执行的过程中又提出新的任务了对吧，那就不好办了。。。</p><p>怎么解决呢？<code>引入循环机制</code></p><h3 id="引入循环机制" tabindex="-1">引入循环机制 <a class="header-anchor" href="#引入循环机制" aria-label="Permalink to &quot;引入循环机制&quot;">​</a></h3><p>这个机制就是来解决：<strong>要想在线程运行过程中，能接收并执行新的任务</strong>。</p><p>那较为简单的实现，我们加一个<code>for</code>循环不就好了？这样线程就能一直循环执行了，如下图：</p><p><img src="'+e+'" alt=""></p><h3 id="安全退出" tabindex="-1">安全退出 <a class="header-anchor" href="#安全退出" aria-label="Permalink to &quot;安全退出&quot;">​</a></h3><p>当确定要退出当前页面的时候，页面主线程会设置一个退出标志变量，在执行完一个任务之后，判断是否有设置退出标志，来判断时候终止当前所有任务，退出线程。</p><h2 id="处理其它线程发送的任务" tabindex="-1">处理其它线程发送的任务 <a class="header-anchor" href="#处理其它线程发送的任务" aria-label="Permalink to &quot;处理其它线程发送的任务&quot;">​</a></h2><p>还是这个场景，我们再扩展一下，我们上一节中说的都是【单线程】，也就是班委组织内部（主线程）的任务处理，现实情况往往可能存在于其它非班委同学也想参与，也提出任务安排，那怎么解决呢？</p><p>我们以 IO 线程为例，看看是怎么将消息发送给主线程的：</p><p><img src="'+o+'" alt=""></p><p>由上图可看到，主线程会频繁收到 IO 线程的一些任务，这里我稍微扩展一下：</p><ul><li>接收到鼠标点击事件之后，渲染主线程就要开始执行<code>javascript</code> 脚本处理该点击事件。</li><li>接受到资源加载完成的信息后，渲染进程要开始进行 DOM 解析等。</li></ul><p>那每个任务不能你来了就执行吧，一个不错的方法就是存起来，也就是下面要说的消息队列：</p><h3 id="引入消息队列" tabindex="-1">引入消息队列 <a class="header-anchor" href="#引入消息队列" aria-label="Permalink to &quot;引入消息队列&quot;">​</a></h3><p>消息队列是一种数据结构，可以存放要执行的任务，“先进先出”，也就是说新的任务添加到队尾，取任务在队头。就如图这样：</p><p><img src="'+r+'" alt=""></p><h3 id="消息队列中的任务类型" tabindex="-1">消息队列中的任务类型 <a class="header-anchor" href="#消息队列中的任务类型" aria-label="Permalink to &quot;消息队列中的任务类型&quot;">​</a></h3><p>包含了很多内部消息类型，如输入事件（鼠标滚动、点击、移动）、微任务、文件读写、WebSocket、JavaScript 定时器等等。</p><p>除此之外，消息队列中还包含了很多与页面相关的事件，如 JavaScript 执行、解析 DOM、样式计算、布局计算、CSS 动画等。</p><p>以上这些事件都是在主线程中执行的，所以在编写 Web 应用时，你还需要衡量这些事件所占用的时长，并想办法解决单个任务占用主线程过久的问题。</p><h3 id="引入微任务" tabindex="-1">引入微任务 <a class="header-anchor" href="#引入微任务" aria-label="Permalink to &quot;引入微任务&quot;">​</a></h3><p>也是鉴于消息队列的“先进先出”的数据结构，后加入的任务需要等待前面的任务执行完，才会被执行，所以有问题需要被解决：</p><p>一个常见的场景就是 DOM 节点变化监听，这是一个典型的观察者模式。</p><p>不过这样也有问题：</p><ul><li><p>因为 DOM 操作很频繁，如果每次变化都直接调用相应的 JavaScript 接口，那这个当前的任务执行时间就会被拉长，从而降低执行效率。</p></li><li><p>那我不直接执行，而是把这些 DOM 变化做成异步的消息时间，添加到消息队列的话，又会影响实时性。</p></li></ul><p>总结：如果 DOM 发送变化，采用同步通知的方式会影响当前任务的执行效率，如果采用异步的方式，又会造成监控的实时性问题。</p><p>针对这两个问题，<strong>微任务</strong>产生了。</p><p>我们通常把在消息队列中的任务称为<code>宏任务</code>，每个<code>宏任务</code>中都包含了一个微任务队列，在执行<code>宏任务</code>过程中，如果有<code>微任务</code>（DOM 变化），那么就添加到<code>微任务</code>队列中，这样即不会影响<code>宏任务</code>的执行（解决执行效率问题），同时一个<code>宏任务</code>完成，渲染进程不着急执行下一个<code>宏任务</code>，而是执行当前<code>宏任务</code>的<code>微任务</code>（解决实时性问题）。</p><blockquote><p>这小节只是说为什么引入微任务，后面章节我们再详细聊微任务</p></blockquote><h2 id="事件循环总结" tabindex="-1">事件循环总结 <a class="header-anchor" href="#事件循环总结" aria-label="Permalink to &quot;事件循环总结&quot;">​</a></h2><p>我们来总结一下上述几节讲的内容，汇总成一张图：</p><p><img src="'+c+'" alt=""></p><h2 id="处理其它进程发送的任务" tabindex="-1">处理其它进程发送的任务 <a class="header-anchor" href="#处理其它进程发送的任务" aria-label="Permalink to &quot;处理其它进程发送的任务&quot;">​</a></h2><p>还是班级活动的场景，咱们再扩充一下呢？讲了线程和其它线程（班级内部）怎么处理，那进程（其它班级）之间呢。</p><blockquote><p>请先理解上面的【处理其它线程发送的任务】，之后再来看这张图，就很好理解了！</p></blockquote><p>这个比较简单，之间看图吧：</p><p><img src="'+t+`" alt=""></p><p>渲染进程（我们班级），里面有一个专门的 IO 线程（班级外交官），用来接收其它进程（专门接收其它班级消息）传过来的消息，接到的消息再通过【处理其它线程发送的任务】给到主线程。</p><h2 id="消息队列和事件循环小结" tabindex="-1">消息队列和事件循环小结 <a class="header-anchor" href="#消息队列和事件循环小结" aria-label="Permalink to &quot;消息队列和事件循环小结&quot;">​</a></h2><p>我们通过一个安排班会的场景例子带入，最后能总结以下这几点（这里就按准确一些的语言描述，避免和例子搞混）：</p><ul><li><p>如果有一些确定好的任务，如主线程上确定好的任务，使用单线程按照顺序处理，只是第一版本的模型，显然很粗糙。</p></li><li><p>在线程执行中接收并处理新的任务，引入事件循环（循环语句和事件系统），能满足单线程的接收处理任务，。这是第二版，还是不够。</p></li><li><p>对于其它线程呢？我们引入消息队列，接收其它线程发送的任务。</p></li><li><p>由于消息队列的机制并不灵活，于是引入微任务，能满足效率和实时性</p></li><li><p>对于其它进程呢？不只是渲染进程一个进程做事啊，其它进程也会有任务发送过来，于是通过 IPC 将任务发送给 IO 线程，IO 线程再发送给主线程。</p></li></ul><h2 id="宏任务微任务" tabindex="-1">宏任务微任务 <a class="header-anchor" href="#宏任务微任务" aria-label="Permalink to &quot;宏任务微任务&quot;">​</a></h2><p>我们通常把在消息队列中的任务称为<code>宏任务</code>，每个<code>宏任务</code>中都包含了一个微任务队列。</p><h3 id="宏任务" tabindex="-1">宏任务 <a class="header-anchor" href="#宏任务" aria-label="Permalink to &quot;宏任务&quot;">​</a></h3><p>页面中大多数任务都是在主线程上执行，包括：渲染事件（如解析 DOM、计算布局、绘制）、用户交互事件（如鼠标点击、滚动页面、放大缩小等）、JavaScript 脚本执行事件、网络请求完成、文件读写完成事件。</p><p>简单来说就是以下这几种类型：</p><ul><li>script(整体代码)</li><li>setTimeout()</li><li>setInterval()</li><li>postMessage</li><li>I/O</li><li>UI 交互事件</li></ul><h3 id="settimeout" tabindex="-1">setTimeout <a class="header-anchor" href="#settimeout" aria-label="Permalink to &quot;setTimeout&quot;">​</a></h3><p>讲到宏任务，总是离不开 setTimeout，简单来说它是一个定时器，用来指定某个函数在多少秒后执行。</p><p>也是由于它<strong>延迟后执行</strong> 的特性，并且还需要在指定时间间隔执行，让原本的按顺序执行的消息队列无法满足，于是 Chrome 又搞了一个消息队列，专门来存放这些延迟执行的任务，一般我们叫延迟队列。</p><p>他会等待主线程的顺序消息队列（为了和延迟消息队列做区分才这么叫）处理完，之后再到延迟队列拿里面的任务。这也就能解释，为什么尽管你设置了倒计时，然而实际上并不是在那个时间点立即被执行了。</p><p>还有一个常考的点，就是<strong>setTimeout 的 this 指向</strong>，不符合直觉：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> name </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> myObj </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">showName</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">name</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#BABED8;">(myObj</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">showName</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#BABED8;">) </span><span style="color:#676E95;font-style:italic;">// 输出1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 可以通过bind改变this指向</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#BABED8;">(myObj</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">showName</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bind</span><span style="color:#BABED8;">(myObj)</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h3 id="宏任务不足点-或者问为什么不能只用宏任务" tabindex="-1">宏任务不足点（或者问为什么不能只用宏任务） <a class="header-anchor" href="#宏任务不足点-或者问为什么不能只用宏任务" aria-label="Permalink to &quot;宏任务不足点（或者问为什么不能只用宏任务）&quot;">​</a></h3><p>页面的诸多任务，随时都有可能被添加到队列中，由系统操作，JavaScript 代码无法精准掌握任务在队列中的位置，很难掌控开始执行任务的时间。</p><p>因此，对于一些高实时性的需求，由于宏任务的时间间隔不能精准控制，也就无法完成。</p><p>于是有了微任务：</p><h3 id="微任务" tabindex="-1">微任务 <a class="header-anchor" href="#微任务" aria-label="Permalink to &quot;微任务&quot;">​</a></h3><p>微任务就是一个需要异步执行的函数，执行时机是在主函数执行结束之后、当前宏任务结束之前。每个宏任务都关联着一个微任务队列。</p><p><strong>微任务产生时机</strong></p><ul><li>一种是使用 MutationObserver 监控某个 DOM 节点，然后通过 JavaScript 来修改这个节点等，当 DOM 节点发送变化，就会产生 DOM 变化记录的微任务。</li><li>另一种是使用 Promise，当调用 Promise.resolve()或者 Promise.reject()方法是，也会产生微任务。</li></ul><p><strong>微任务执行时机</strong></p><p>当宏任务中 JavaScript 快执行完时，JavaScript 引擎会检查全局执行上下文中的微任务队列，然后按照顺序执行微任务。</p><p>下图，描述了在执行 ParseHTML 这个宏任务的过程中，遇到 JavaScript 脚本，进入到 JavaScript 的执行环境，全局上下中包含了微任务列表（此时是空）。在 JavaScript 脚本继续执行的过程中，分别通过<code>Prpomise</code> 和 <code>removeChild</code>创建了两个微任务，并被添加到微任务队列：</p><p><img src="`+i+'" alt=""></p><p>接着到 JavaScript 脚本执行结束，准备退出全局执行上下文（也就是检查点）的过程：</p><blockquote><p>WHATWG 把执行微任务的时间点称为检查点，检查点 JavaScript 引擎会检查微任务列表，并依次执行微任务，等微任务队列清空就退出全局执行上下文。</p></blockquote><p><img src="'+y+`" alt=""></p><h2 id="宏任务微任务总结-宏任务与微任务的关系" tabindex="-1">宏任务微任务总结（宏任务与微任务的关系） <a class="header-anchor" href="#宏任务微任务总结-宏任务与微任务的关系" aria-label="Permalink to &quot;宏任务微任务总结（宏任务与微任务的关系）&quot;">​</a></h2><ul><li><p>每个宏任务都会创建自己的微任务队列。微任务和宏任务是绑定的关系。</p></li><li><p>微任务的执行时间会影响宏任务的时长。在宏任务中，微任务执行的时间比如说 1000 毫秒，这个时间也会被体现在宏任务中。</p></li><li><p>在一个宏任务中，创建的微任务和用于回调的宏任务，由于产生的宏任务是要插到消息队列尾端的，需要在下一次的事件循环中才会被执行，而微任务是会在这次的事件循环执行，所以可以说，微任务都早于宏任务执行（后面会有经典的例子带你理解这段话）。</p></li></ul><h2 id="例题巩固" tabindex="-1">例题巩固 <a class="header-anchor" href="#例题巩固" aria-label="Permalink to &quot;例题巩固&quot;">​</a></h2><p>由简单到复杂，话不多说直接开始：</p><h3 id="例题-1" tabindex="-1">例题 1 <a class="header-anchor" href="#例题-1" aria-label="Permalink to &quot;例题 1&quot;">​</a></h3><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">start</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">setTimeout</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">promise1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">promise2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">end</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>解析：</p><p><img src="`+F+`" alt=""> 输出：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">start</span></span>
<span class="line"><span style="color:#babed8;">// 存宏任务和微任务，不会直接执行</span></span>
<span class="line"><span style="color:#babed8;">end</span></span>
<span class="line"><span style="color:#babed8;">// 栈空，执行微任务队列中的任务（经常会有坑，需要注意一下）</span></span>
<span class="line"><span style="color:#babed8;">promise1</span></span>
<span class="line"><span style="color:#babed8;">promise2</span></span>
<span class="line"><span style="color:#babed8;">// 再下一轮eventloop执行宏任务</span></span>
<span class="line"><span style="color:#babed8;">setTimeout</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="例题-2" tabindex="-1">例题 2 <a class="header-anchor" href="#例题-2" aria-label="Permalink to &quot;例题 2&quot;">​</a></h3><p>这个是有 async promise 和 setTimeout 的，杂糅：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">async</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">async1</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">async1 start</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">async2</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">async1 end</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">async2</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">async2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">script start</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">setTimeout</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#82AAFF;">async1</span><span style="color:#BABED8;">()</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">resolve</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">promise1</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">promise2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">script end</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>输出：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">//从上往下看，定义的两个async函数先别管（执行再说）</span></span>
<span class="line"><span style="color:#babed8;">script start</span></span>
<span class="line"><span style="color:#babed8;">//setTimeout放到宏任务队列</span></span>
<span class="line"><span style="color:#babed8;">// 执行了async1（异步函数）</span></span>
<span class="line"><span style="color:#babed8;">async1 start</span></span>
<span class="line"><span style="color:#babed8;">// await 后面是 async2()，执行 async2（）异步函数</span></span>
<span class="line"><span style="color:#babed8;">async2</span></span>
<span class="line"><span style="color:#babed8;">// await 后面的代码是微任务，放入微任务队列</span></span>
<span class="line"><span style="color:#babed8;">promise1</span></span>
<span class="line"><span style="color:#babed8;">// .then()放到微任务队列</span></span>
<span class="line"><span style="color:#babed8;">script end</span></span>
<span class="line"><span style="color:#babed8;">// 同步代码（同时也是宏任务）执行完成，接着执行微任务</span></span>
<span class="line"><span style="color:#babed8;">async1 end</span></span>
<span class="line"><span style="color:#babed8;">promise2</span></span>
<span class="line"><span style="color:#babed8;">//微任务队列清空，执行宏任务</span></span>
<span class="line"><span style="color:#babed8;">setTimeout</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h3 id="例题-3" tabindex="-1">例题 3 <a class="header-anchor" href="#例题-3" aria-label="Permalink to &quot;例题 3&quot;">​</a></h3><p>我把这类题成为嵌套搞死人型题，执行代码会产生很多个宏任务，每个宏任务中又会产生微任务。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">start</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">children2</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">children3</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">0</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">resolve</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">reject</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">children4</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">children5</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">resolve</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">children6</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">children7</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">setTimeout</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">res</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><p>输出：</p><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">start</span></span>
<span class="line"><span style="color:#babed8;">// 遇到setTimeout，放入宏任务队列，称为宏任务1</span></span>
<span class="line"><span style="color:#babed8;">children4</span></span>
<span class="line"><span style="color:#babed8;">// 遇到setTimeout，放入宏任务队列，称为宏任务2</span></span>
<span class="line"><span style="color:#babed8;">// 遇到.then  !!!不会被放到微任务队列!!!，因为resolve 是放到 setTimeout中执行的。</span></span>
<span class="line"><span style="color:#babed8;">// 执行完检查微任务队列是空的，于是执行宏任务1</span></span>
<span class="line"><span style="color:#babed8;">children2</span></span>
<span class="line"><span style="color:#babed8;">// 把Promise.resolve().then放入微任务队列</span></span>
<span class="line"><span style="color:#babed8;">// 宏任务队列1空了，检查微任务队列，执行微任务</span></span>
<span class="line"><span style="color:#babed8;">children3</span></span>
<span class="line"><span style="color:#babed8;">// 微任务清空，执行宏任务2</span></span>
<span class="line"><span style="color:#babed8;">children5</span></span>
<span class="line"><span style="color:#babed8;">// .then放入微任务队列，宏任务2执行完，执行微任务</span></span>
<span class="line"><span style="color:#babed8;">children7</span></span>
<span class="line"><span style="color:#babed8;">// setTimeout放入宏任务中，微任务执行完后执行</span></span>
<span class="line"><span style="color:#babed8;">children6</span></span>
<span class="line"><span style="color:#babed8;"></span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>哇，结束了~晕了晕了。多理几遍就好了嘛，也不是很难 hh</p>`,109),u=[D];function d(m,B,A,h,E,g){return n(),a("div",null,u)}const f=s(b,[["render",d]]);export{v as __pageData,f as default};
