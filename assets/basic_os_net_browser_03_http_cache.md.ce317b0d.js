import{_ as a,i as s,h as e,O as n}from"./chunks/framework.9399b50c.js";const o="/notes/assets/http-request.b9e0d653.png",l="/notes/assets/client-cache-control.fb39003a.png",p="/notes/assets/request-cache-control.14081d2a.png",t="/notes/assets/response-cache-control.4347d457.png",c="/notes/assets/nginx-type-css.ec8de44c.png",r="/notes/assets/browser-req-last-modify.cc59ac82.png",i="/notes/assets/http-status-relation.abaef56a.png",d="/notes/assets/re-02.a50f1b17.png",h="/notes/assets/nginx-01.99b34a21.png",D="/notes/assets/nginx-02.26b48cdf.png",A=JSON.parse('{"title":"HTTP 缓存","description":"","frontmatter":{"title":"HTTP 缓存","author":"liaoyi"},"headers":[],"relativePath":"basic/os_net_browser/03_http_cache.md","lastUpdated":1696236510000}'),y={name:"basic/os_net_browser/03_http_cache.md"},m=n('<h1 id="http缓存-前端打包缓存控制" tabindex="-1">http缓存 &amp; 前端打包缓存控制 <a class="header-anchor" href="#http缓存-前端打包缓存控制" aria-label="Permalink to &quot;http缓存 &amp; 前端打包缓存控制&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>我们用 http 访问时,会先发送一个请求,之后服务器返回一个应答,在 Chrome 的开发者工具(按 F12 或右击选择检查)中展现了整个过程：</p><p><img src="'+o+'" alt=""></p><p>第一部分 General 是概要,包含请求地址,请求方式,状态码,服务器地址以及 Referrer 策略。</p><p>第二部分是应答头部,是服务器返回的。</p><p>第三部分是请求头部,是客户端发送的。</p><div class="tip custom-block"><p class="custom-block-title">缓存控制和缓存校验</p><p>这次我们从两个角度来看看 http 的缓存： <strong>缓存控制和缓存校验。</strong></p><p><strong>缓存控制：</strong> 控制缓存的开关,用于标识请求或访问中是否开启了缓存,使用了哪种缓存方式。</p><p><strong>缓存校验：</strong> 如何校验缓存,比如怎么定义缓存的有效期,怎么确保缓存是最新的。</p></div><h2 id="缓存控制" tabindex="-1">缓存控制 <a class="header-anchor" href="#缓存控制" aria-label="Permalink to &quot;缓存控制&quot;">​</a></h2><blockquote><p>在 http 中,控制缓存开关的字段有两个：<code>Pragma</code> 和 <code>Cache-Control</code>。</p></blockquote><h3 id="pragma" tabindex="-1">Pragma <a class="header-anchor" href="#pragma" aria-label="Permalink to &quot;Pragma&quot;">​</a></h3><p>Pragma 有两个字段 Pragma 和 Expires。</p><p>Pragma 的值为 no-cache 时,表示禁用缓存.</p><p>Expires 的值是一个 GMT 时间,表示该缓存的有效时间。</p><p>Pragma 是旧产物,已经逐步抛弃,有些网站为了向下兼容还保留了这两个字段。如果一个报文中同时出现 Pragma 和 Cache-Control 时,以 Pragma 为准。同时出现 Cache-Control 和 Expires 时,以 Cache-Control 为准。即优先级从高到低是 <code>Pragma -&gt; Cache-Control -&gt; Expires</code></p><h3 id="cache-control" tabindex="-1">Cache-Control <a class="header-anchor" href="#cache-control" aria-label="Permalink to &quot;Cache-Control&quot;">​</a></h3><p>在介绍之前,先啰嗦两个容易忽视的地方：</p><ul><li>符合缓存策略时,服务器不会发送新的资源,但不是说客户端和服务器就没有会话了,客户端还是会发请求到服务器的。</li><li><code>Cache-Control </code>除了在响应中使用,在请求中也可以使用。我们用开发者工具来模拟下请求时带上<code> Cache-Control</code>：<code>勾选</code> <code>Disable cache</code>,刷新页面,可以看到 <code>Request Headers</code> 中有个字段 <code>Cache-Control: no-cache</code>。</li></ul><p><img src="'+l+'" alt=""></p><p>同时在 <code>Response Headers</code> 中也能到 <code>Cache-Control</code> 字段,它的值是 <code>must-revalidate</code>,这是服务端设置的。</p><h4 id="请求时-cache-control-可设值" tabindex="-1">请求时 Cache-Control 可设值 <a class="header-anchor" href="#请求时-cache-control-可设值" aria-label="Permalink to &quot;请求时 Cache-Control 可设值&quot;">​</a></h4><p>在请求中使用 <code>Cache-Control</code> 时,它可选的值有：</p><p><img src="'+p+'" alt=""></p><h4 id="响应时-cache-control-可设值" tabindex="-1">响应时 Cache-Control 可设值 <a class="header-anchor" href="#响应时-cache-control-可设值" aria-label="Permalink to &quot;响应时 Cache-Control 可设值&quot;">​</a></h4><p><img src="'+t+`" alt=""></p><h5 id="no-store-优先级最高" tabindex="-1">no-store 优先级最高 <a class="header-anchor" href="#no-store-优先级最高" aria-label="Permalink to &quot;no-store 优先级最高&quot;">​</a></h5><p>在 Cache-Control 中,这些值可以自由组合,多个值如果冲突时,也是有优先级的,而 no-store 优先级最高。我们可以测试下：在 nginx 中做如下配置：</p><div class="language-shell line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">server</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#FFCB6B;">listen</span><span style="color:#BABED8;"> </span><span style="color:#F78C6C;">88</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#FFCB6B;">root</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">/opt/ms</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#FFCB6B;">index</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">index.php</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">index.html</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">index.htm</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">index.nginx-debian.html</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#FFCB6B;">location</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">~</span><span style="color:#BABED8;">*</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">^.+</span><span style="color:#BABED8;">\\.</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">css</span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">js</span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">txt</span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">xml</span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">swf</span><span style="color:#89DDFF;">|</span><span style="color:#FFCB6B;">wav</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;">$ </span><span style="color:#C3E88D;">{</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#FFCB6B;">add_header</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Cache-Control</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">no-store</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#FFCB6B;">add_header</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Cache-Control</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">max-age=</span><span style="color:#F78C6C;">3600</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#FFCB6B;">add_header</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Cache-Control</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">public</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#FFCB6B;">add_header</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Cache-Control</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">only-if-cached</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#FFCB6B;">add_header</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Cache-Control</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">no-cache</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">        </span><span style="color:#FFCB6B;">add_header</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">Cache-Control</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">must-revalidate</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">    }</span></span>
<span class="line"><span style="color:#BABED8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>在/opt/ms 下增加个文件 type.css,内容如下：</p><div class="language-css line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">a</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">#</span><span style="color:#BABED8;">000000</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">focus</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#FFCB6B;">a</span><span style="color:#89DDFF;">:</span><span style="color:#C792EA;">hover</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#B2CCD6;">text-decoration</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> none</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">#</span><span style="color:#BABED8;">708090</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>配置好之后,reload 下 nginx,在浏览器访问地址<a href="http://127.0.0.1:88/type.css,%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%93%8D%E5%BA%94%E5%A4%B4%E9%83%A8%E5%8C%85%E5%90%ABnginx%E9%85%8D%E7%BD%AE%E4%B8%AD%E7%9A%84%E5%AD%97%E6%AE%B5%EF%BC%9A" target="_blank" rel="noreferrer">http://127.0.0.1:88/type.css,可以看到响应头部包含nginx配置中的字段：</a></p><p><img src="`+c+`" alt=""></p><p>重复刷新访问,会发现每次的状态码都是 200,原因是 no-store 的优先级最高,本地不保存,每次都需要服务器发送资源。</p><h4 id="public-和-private-的选择" tabindex="-1">public 和 private 的选择 <a class="header-anchor" href="#public-和-private-的选择" aria-label="Permalink to &quot;public 和 private 的选择&quot;">​</a></h4><p>如果你用了 <code>CDN</code>,你需要关注下这个值。CDN 厂商一般会要求 <code>cache-control</code> 的值为 <code>public</code>,提升缓存命中率。如果你的缓存命中率很低,而访问量很大的话,可以看下是不是设置了<code>private</code>,<code>no-cache</code> 这类的值。如果定义了<code>max-age</code>,可以不用再定义 <code>public</code>,它们的意义是一样的。</p><h4 id="哪里会设置-cache-control" tabindex="-1">哪里会设置 Cache-Control <a class="header-anchor" href="#哪里会设置-cache-control" aria-label="Permalink to &quot;哪里会设置 Cache-Control&quot;">​</a></h4><p>以 <code>LNMP</code> 的环境为例,一次响应经历的过程是：</p><ol><li><code>php-cgi</code> 解析代码并执行,将结果返回给 nginx,</li><li>如果 <code>nginx</code> 前面有反向代理,则会经过一次反向代理服务器,</li></ol><p>所以 <code>cache-control</code> 可能会在 <code>nginx</code>,<code>php-cgi</code>,<code>php</code> 代码,反向代理服务器,这些地方地方设置。在 <code>php.ini</code>中,有个参数是 <code>session.cache_limiter</code>,需要注意下。在 nginx 中有个很常见的配置：</p><div class="language-nginx line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">nginx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">location</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">~*</span><span style="color:#BABED8;"> </span><span style="color:#C3E88D;">^.+\\.(ico|gif|jpg|jpeg|png)$ </span><span style="color:#BABED8;">{</span></span>
<span class="line"><span style="color:#BABED8;">   </span><span style="color:#89DDFF;"> expires </span><span style="color:#BABED8;">30d</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>这个指令等同于 <code>cache-control: max-age=2592000</code>,同时你会在响应头部看到一个 <code>etag</code> 字段,这是由于 <code>nginx</code> 默认开启,如果要关闭可以增加个配置 <code>etag off</code>。这个 <code>etag</code> 就是我们接下要看的缓存校验字段。</p><h2 id="缓存校验" tabindex="-1">缓存校验 <a class="header-anchor" href="#缓存校验" aria-label="Permalink to &quot;缓存校验&quot;">​</a></h2><p>在缓存中,我们需要一个机制来验证缓存是否有效。比如服务器的资源更新了,客户端需要及时刷新缓存；又或者客户端的资源过了有效期,但服务器上的资源还是旧的,此时并不需要重新发送。缓存校验就是用来解决这些问题的,在 http 1.1 中,我们主要关注下<code>Last-Modified</code> 和 <code>etag</code> 这两个字段。</p><h3 id="last-modified" tabindex="-1">Last-Modified <a class="header-anchor" href="#last-modified" aria-label="Permalink to &quot;Last-Modified&quot;">​</a></h3><p>服务端在返回资源时,会将该资源的最后更改时间通过<code>Last-Modified</code>字段返回给客户端。客户端下次请求时通过<code>If-Modified-Since</code>或者<code>If-Unmodified-Since</code>并带上<code>Last-Modified</code>,服务端检查该时间是否与服务器的最后修改时间一致：如果一致,则返回<code>304状态码</code>,不返回资源；如果不一致则返回<code>200状态码</code>和修改后的资源,并带上新的时间。</p><p><img src="`+r+'" alt=""></p><h4 id="if-modified-since-和-if-unmodified-since-的区别" tabindex="-1">If-Modified-Since 和 If-Unmodified-Since 的区别 <a class="header-anchor" href="#if-modified-since-和-if-unmodified-since-的区别" aria-label="Permalink to &quot;If-Modified-Since 和 If-Unmodified-Since 的区别&quot;">​</a></h4><ul><li><strong>If-Modified-Since：</strong> 告诉服务器如果时间一致,返回 <code>状态码304</code></li><li><strong>If-Unmodified-Since：</strong> 告诉服务器如果时间不一致,返回 <code>状态码412</code></li></ul><h4 id="etag" tabindex="-1">etag <a class="header-anchor" href="#etag" aria-label="Permalink to &quot;etag&quot;">​</a></h4><p>单纯的以修改时间来判断还是有缺陷,比如文件的最后修改时间变了,但内容没变。对于这样的情况,我们可以使用 <code>etag</code> 来处理。 <code>etag</code> 的方式是这样：服务器通过某个算法对资源进行计算,取得一串值(类似于文件的 md5 值),之后将该值通过 <code>etag</code> 返回给客户端,客户端下次请求时通过 <code>If-None-Match</code> 或 <code>If-Match</code> 带上该值,服务器对该值进行对比校验：如果一致则不要返回资源。</p><h4 id="if-none-match-和-if-match-的区别" tabindex="-1">If-None-Match 和 If-Match 的区别 <a class="header-anchor" href="#if-none-match-和-if-match-的区别" aria-label="Permalink to &quot;If-None-Match 和 If-Match 的区别&quot;">​</a></h4><ul><li><strong>If-None-Match：</strong> 告诉服务器如果一致,返回<code>状态码304</code>,不一致则返回资源</li><li><strong>If-Match：</strong> 告诉服务器如果不一致,返回<code>状态码412</code></li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><ul><li>缓存开关是： pragma, cache-control。</li><li>缓存校验有：Expires,Last-Modified,etag。</li><li>从状态码的角度来看,它们的关系如下图：</li></ul><p><img src="'+i+'" alt=""></p><ul><li>cache-control 的各个值关系如下图</li></ul><p><img src="'+d+'" alt=""></p><details class="details custom-block"><summary>相关阅读</summary><ul><li><a href="https://blog.csdn.net/u012375924/article/details/82806617" target="_blank" rel="noreferrer">浅谈 http 中的 Cache-Control</a></li><li><a href="https://blog.csdn.net/u010971572/article/details/119223542" target="_blank" rel="noreferrer">HTTP 412 状态码</a></li><li><a href="https://blog.csdn.net/qq_35393869/article/details/88907735" target="_blank" rel="noreferrer">ajax 请求 304 解决方案</a></li><li><a href="https://www.jianshu.com/p/11534ccb7fe6" target="_blank" rel="noreferrer">HTTP 304 状态码的详细讲解</a></li><li><a href="https://blog.csdn.net/qq_37960324/article/details/83374855" target="_blank" rel="noreferrer">HTTP 304 状态码的详细讲解</a></li><li><a href="https://www.cnblogs.com/limingxi/p/3823016.html" target="_blank" rel="noreferrer">[IE bug] ajax 请求 304 解决方案</a></li></ul></details><h2 id="nginx-反向代理和正向代理" tabindex="-1">Nginx 反向代理和正向代理 <a class="header-anchor" href="#nginx-反向代理和正向代理" aria-label="Permalink to &quot;Nginx 反向代理和正向代理&quot;">​</a></h2><p><code>Nginx</code>是一个高性能的 <code>HTTP</code> 和反向代理服务器,同时也提供邮件服务.</p><h3 id="正向代理" tabindex="-1">正向代理 <a class="header-anchor" href="#正向代理" aria-label="Permalink to &quot;正向代理&quot;">​</a></h3><p>正向代理类似一个跳板机,代理访问外部资源。</p><p>举个例子：</p><p>我是一个用户,我访问不了某网站,但是我能访问一个代理服务器,这个代理服务器呢,他能访问那个我不能访问的网站,于是我先连上代理服务器,告诉他我需要那个无法访问网站的内容,代理服务器去取回来,然后返回给我。从网站的角度,只在代理服务器来取内容的时候有一次记录,有时候并不知道是用户的请求,也隐藏了用户的资料,这取决于代理告不告诉网站。</p><blockquote><p>客户端必须设置正向代理服务器,当然前提是要知道正向代理服务器的 IP 地址,还有代理程序的端口。</p></blockquote><p><strong>正向代理的用途：</strong></p><ul><li>访问原来无法访问的资源,如 google</li><li>可以做缓存,加速访问资源</li><li>对客户端访问授权,上网进行认证</li><li>代理可以记录用户访问记录（上网行为管理）,对外隐藏用户信息</li></ul><h3 id="反向代理" tabindex="-1">反向代理 <a class="header-anchor" href="#反向代理" aria-label="Permalink to &quot;反向代理&quot;">​</a></h3><p>是指以代理服务器来接受 internet 上的连接请求,然后将请求转发给内部网络上的服务器,并将从服务器上得到的结果返回给 internet 上请求连接的客户端,此时代理服务器对外就表现为一个服务器。</p><p><strong>反向代理的作用：</strong></p><ul><li>保证内网的安全,可以使用反向代理提供 WAF 功能,阻止 web 攻击 <ul><li>大型网站,通常将反向代理作为公网访问地址,Web 服务器是内网。</li></ul></li><li>负载均衡,通过反向代理服务器来优化网站的负载</li></ul><h3 id="正-反向代理的区别" tabindex="-1">正-反向代理的区别 <a class="header-anchor" href="#正-反向代理的区别" aria-label="Permalink to &quot;正-反向代理的区别&quot;">​</a></h3><p><img src="'+h+'" alt=""></p><p><img src="'+D+`" alt=""></p><div class="tip custom-block"><p class="custom-block-title">参考资料</p><p><a href="https://www.cnblogs.com/Anker/p/6056540.html" target="_blank" rel="noreferrer">正向代理与反向代理【总结】</a></p><p><a href="https://segmentfault.com/a/1190000037487315" target="_blank" rel="noreferrer">Nginx 下关于缓存控制字段 cache-control 的配置说明</a></p><p><a href="https://www.bilibili.com/video/BV1F5411J7vK/" target="_blank" rel="noreferrer">【狂神说】Nginx 最新教程通俗易懂,40 分钟搞定！</a></p><p><a href="https://www.bilibili.com/video/BV1iK411T73K/" target="_blank" rel="noreferrer">NGINX 如何控制客户端缓存 | NGINX 基础培训课程（第三季） EP.1</a></p></div><h2 id="前端打包缓存控制" tabindex="-1">前端打包缓存控制 <a class="header-anchor" href="#前端打包缓存控制" aria-label="Permalink to &quot;前端打包缓存控制&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">缓存的作用</p><ul><li>加快网页的访问速度</li></ul></div><h4 id="不合理的缓存会造成什么结果" tabindex="-1">不合理的缓存会造成什么结果 ？ <a class="header-anchor" href="#不合理的缓存会造成什么结果" aria-label="Permalink to &quot;不合理的缓存会造成什么结果 ？&quot;">​</a></h4><p>前端每次发版,浏览器存在缓存要强制刷新才能看到更新</p><h4 id="有哪些资源会被缓存" tabindex="-1">有哪些资源会被缓存 ？ <a class="header-anchor" href="#有哪些资源会被缓存" aria-label="Permalink to &quot;有哪些资源会被缓存 ？&quot;">​</a></h4><ul><li>页面</li><li>图片</li><li>css</li><li>js</li></ul><h4 id="打包时如何合理的清除资源缓存" tabindex="-1">打包时如何合理的清除资源缓存 ？ <a class="header-anchor" href="#打包时如何合理的清除资源缓存" aria-label="Permalink to &quot;打包时如何合理的清除资源缓存 ？&quot;">​</a></h4><p>前端打包时,根据资源内容进行 <code>hash</code>,然后将这个 <code>hash</code> 值作为资源名称的一部分,那么有改动内容的资源,他的资源名称会变得不一样,没有任何内容改变的资源,他的资源名称就会始终一样。这样的话这些 <code>css</code>、<code>img</code>、<code>js</code> 就能合理的应用缓存了,资源改变了,就会获取新新文件的内容,资源没改变,如果有缓存就优先从缓存中获取。</p><h4 id="index-html-文件如何清除缓存" tabindex="-1">index.html 文件如何清除缓存 <a class="header-anchor" href="#index-html-文件如何清除缓存" aria-label="Permalink to &quot;index.html 文件如何清除缓存&quot;">​</a></h4><p>SPA 应用一般只有一个静态页面<code>index.html</code>,你以为你 css,img,js 都合理的清除缓存就足够了？殊不知你的<code>index.html</code>也被浏览器缓存了,如果你不做特殊配置,每次发版之后,客户浏览器访问的<code>index.html</code>,实际都是浏览器缓存的<code>index.html</code>内容, 而<code>index.html</code>中记录的是静态资源<code>js,css,图片资源的请求地址</code>,这些资源可都是可以被缓存的,所以,即使你<code>css,图片,js资源</code>都存在最新数据,且资源的名称都和上个版本不同,但客户浏览器获取到的资源或者说看到的界面还是上个版本的。这就是因为<code>index.html</code>没有被清除缓存的结果。</p><h4 id="清除index-html文件的缓存" tabindex="-1">清除<code>index.html</code>文件的缓存 <a class="header-anchor" href="#清除index-html文件的缓存" aria-label="Permalink to &quot;清除\`index.html\`文件的缓存&quot;">​</a></h4><p>在<code>index.html</code>的 <code>meta</code> 标签中定义禁止浏览器缓存该 html 文件（所有需要禁止缓存的 html 资源,都可以加上这些<code>meta标签</code>, 用来告知浏览器不要缓存这个<code>html</code>）</p><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">http-equiv</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">cache-control</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">no-cache,no-store, must-revalidate</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">http-equiv</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">pragma</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">no-cache</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">http-equiv</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Expires</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">0</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">head</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><div class="tip custom-block"><p class="custom-block-title">参考资料</p><p><a href="https://www.jianshu.com/p/a5a32acbf205" target="_blank" rel="noreferrer">【解决彻底】vue 前端发版后要刷新才能看到更新问题</a><a href="https://juejin.cn/post/7035814324660600846" target="_blank" rel="noreferrer">处理 Vue 入口文件 index.html 被缓存的问题</a></p></div>`,89),u=[m];function F(b,B,g,C,E,f){return e(),s("div",null,u)}const _=a(y,[["render",F]]);export{A as __pageData,_ as default};
