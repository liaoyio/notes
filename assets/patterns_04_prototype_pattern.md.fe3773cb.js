import{_ as s,i as a,h as n,O as p}from"./chunks/framework.9399b50c.js";const l="/notes/assets/prototype-1.dde6ecfa.png",o="/notes/assets/prototype-2.d8061427.png",m=JSON.parse('{"title":"原型模式","description":"","frontmatter":{"author":"Liaoyi","date":"2023-03-11T00:00:00.000Z"},"headers":[],"relativePath":"patterns/04_prototype_pattern.md","lastUpdated":1696236510000}'),e={name:"patterns/04_prototype_pattern.md"},t=p(`<h1 id="原型模式" tabindex="-1">原型模式 <a class="header-anchor" href="#原型模式" aria-label="Permalink to &quot;原型模式&quot;">​</a></h1><p>本篇我们会介绍原型模式，提到原型这两个字，你一定会想到原型链相关的知识，没错，本篇文章或许能够让更好理解原型与原型链相关的知识。</p><blockquote><p>使用原型模式可以在同一类型的许多对象之间共享属性，这样我们就可以避免重复定义方法和属性，从而减少所使用的内存量。</p></blockquote><p>上述概念我们会在下文的内容以及 demo 演示中逐一介绍，说到原型，它其实也是 JavaScript 的原生对象，其它对象可以通过原型链访问它。</p><p>这里就提到了原型链，直接用文字难以表达清楚，我们来看看下方这个简单例子吧：</p><h2 id="demo" tabindex="-1">Demo <a class="header-anchor" href="#demo" aria-label="Permalink to &quot;Demo&quot;">​</a></h2><p>我们通过 ES6 语法创建了一个名为 Dog 的 class 类，熟悉语法的同学应该知道，当我们 new 生成的实例即可共享这些属性与方法。</p><p>注意这里构造函数是如何包含 <code>name</code> 属性（下方代码高亮处），以及类本身是如何包含 <code>bark</code> 属性，这是语法上的规范。</p><p>当使用 ES6 类时，类本身定义的所有属性(在本例中为 <code>bark</code> )都会自动添加到原型中。</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Dog</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">name</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">bark</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Woof!</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> dog1 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Dog</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ChoDog</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> dog2 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Dog</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DocsDog</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> dog3 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Dog</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Chocolate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><p>放在浏览器上打印一下数据，我们可以得到这样的结果：</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#FFCB6B;">Dog</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// constructor: ƒ Dog(name, breed) bark: ƒ bark()</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#676E95;font-style:italic;">// console.log(dog1.__proto__) 替换为下一行代码</span></span>
<span class="line"><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(Object</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getPrototypeOf</span><span style="color:#BABED8;">(dog1))</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// constructor: ƒ Dog(name, breed) bark: ƒ bark()</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>上述代码中，我们打印了构造函数上的原型 <code>prototype</code> 属性以及实例上的 <code>__proto__</code> 属性。</p><blockquote><p><code>__proto__</code> property has been deprecated as of ECMAScript 3.1 and shouldn’t be used in the code. Use Object.getPrototypeOf and Object.setPrototypeOf instead.</p></blockquote><p>虽然 <code>__proto__</code> 被弃用，但还是可以使用，所以上述代码，我们用 <code>Object.getPrototypeOf</code> 来获取（因为 eslint 语法不让我通过，我又不想关闭，逃...）</p><p>在构造函数的任何实例上，<code>__proto__</code> 的值都是对构造函数原型的直接引用！</p><p>我们不妨比较一下看看原型以及原型链的关系，如下例子：</p><iframe src="https://stackblitz.com/edit/prototype-pattern-dog-demo?devToolsHeight=33&amp;embed=1&amp;file=index.js"></iframe><p>从最后一个 log 信息来看，每当我们试图访问对象上不直接存在的属性时（在这里是指访问 dog1 对象上 bark 属性，但是 dog1 并不存在这个属性），JavaScript 将沿着原型链一直找，查看该属性在原型链中是否可用，如果找到了即可直接使用。</p><h3 id="图示" tabindex="-1">图示 <a class="header-anchor" href="#图示" aria-label="Permalink to &quot;图示&quot;">​</a></h3><p><img src="`+l+`" alt=""></p><p>此处来总结一下：</p><blockquote><p>原型模式在处理访问相同属性的对象时很有用，我们只需要将属性添加到原型中，而不用每次重复创建属性，因为所有实例都可以访问原型对象。</p></blockquote><h2 id="在原型中添加属性" tabindex="-1">在原型中添加属性 <a class="header-anchor" href="#在原型中添加属性" aria-label="Permalink to &quot;在原型中添加属性&quot;">​</a></h2><p>那么所有实例都可以访问原型对象了，因此即使我们创建实例之后，也很容易地将属性添加到原型中。</p><p>狗除开汪汪叫之外，应该可以玩对吧，那我们就可以在 Dog 原型上添加 <code>play</code> 属性来试试，如下代码：</p><iframe src="https://stackblitz.com/edit/prototype-pattern-dog-play?ctl=1&amp;devToolsHeight=33&amp;embed=1&amp;file=index.js"></iframe><details class="details custom-block"><summary>示例源码</summary><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Dog</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#BABED8;">name</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">name</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">bark</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Woof!</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> dog1 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Dog</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ChoDog</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> dog2 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Dog</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">DocsDog</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> dog3 </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">Dog</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Chocolate</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#FFCB6B;">Dog</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">prototype</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">play</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ChoDog is playing now!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">dog1</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">play</span><span style="color:#BABED8;">()</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></details><h2 id="原型链" tabindex="-1">原型链 <a class="header-anchor" href="#原型链" aria-label="Permalink to &quot;原型链&quot;">​</a></h2><p>从原型链这个术语来看，它应该是有很多指向，到目前为止，我们只通过访问实例对象的 <code>__proto__</code> 来访问可用的一些属性，但是，可它是原型链诶！原型对象本身也有一个 <code>__proto__</code> 对象！</p><p>来看看如下代码，我们通过继承 Dog 创建了一个 SuperDog，这只 superdog 除了普通狗的行为，它还有特有的行为，<code>fly</code>！</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line highlighted"><span style="color:#C792EA;">class</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">SuperDog</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">extends</span><span style="color:#BABED8;"> </span><span style="color:#FFCB6B;">Dog</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#C792EA;">constructor</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">name</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">super</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">name</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line highlighted"><span style="color:#BABED8;">  </span><span style="color:#F07178;">fly</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Flying!</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h3 id="demo-1" tabindex="-1">Demo <a class="header-anchor" href="#demo-1" aria-label="Permalink to &quot;Demo&quot;">​</a></h3><p>点开下方的 demo，我们会发现 superdog 可以访问 bark 方法，SuperDog 的原型对象的 <code>__proto__</code> 是指向的 <code>Dog.prototype</code>。</p><iframe src="https://stackblitz.com/edit/prototype-pattern-dog-fly?ctl=1&amp;devToolsHeight=33&amp;embed=1&amp;file=index.js"></iframe><h3 id="图示-1" tabindex="-1">图示 <a class="header-anchor" href="#图示-1" aria-label="Permalink to &quot;图示&quot;">​</a></h3><p><img src="`+o+'" alt=""></p><p>结合图示，对于原型链的理解应该算是很清楚了：当我们试图访问对象上不直接可用的属性时，JavaScript 通过递归方式遍历 <code>__proto__</code> 指向的所有对象，沿着它来找到属性！</p><h2 id="使用-object-create" tabindex="-1">使用 Object.create <a class="header-anchor" href="#使用-object-create" aria-label="Permalink to &quot;使用 Object.create&quot;">​</a></h2><p><code>Object.create</code> 方法能够让我们创建一个新的对象，然后它并没有任何属性，但是它可以访问原型链上的属性，来看看下方的示例：</p><h3 id="demo-2" tabindex="-1">Demo <a class="header-anchor" href="#demo-2" aria-label="Permalink to &quot;Demo&quot;">​</a></h3><iframe src="https://stackblitz.com/edit/prototype-pattern-object-create?ctl=1&amp;devToolsHeight=33&amp;embed=1&amp;file=index.js"></iframe><p>通过 <code>Object.create</code> 我们可以很方便地让新创建的对象，通过原型链遍历的方式来访问对象上的属性。</p><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>原型模式使我们可以轻松地让对象访问和继承其他对象的属性。</p><p>由于原型链允许我们访问对象本身没有直接定义的属性，因此可以避免方法和属性的重复，从而减少内存使用量。</p>',46),r=[t];function c(i,D,y,F,d,b){return n(),a("div",null,r)}const h=s(e,[["render",c]]);export{m as __pageData,h as default};
